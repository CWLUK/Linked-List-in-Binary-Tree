# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:
        if not root: return False
        return self.helper(head, root) or self.isSubPath(head, root.left) or self.isSubPath(head, root.right)
    def helper(self, cur, node):
        if not cur: return True
        if not node: return False
        return cur.val == node.val and (self.helper(cur.next, node.left) or self.helper(cur.next, node.right))
